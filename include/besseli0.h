//
// Copyright (c) 2016 Enrico Kaden & University College London
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef _BESSELI0_H
#define _BESSELI0_H

#include <array>
#include <cmath>

#include "chebychev.h"

namespace smt {

float besselei0(float x) {
	const std::array<float, 18> A = {
			-1.30002500998624804212e-8f,
			6.04699502254191894932e-8f,
			-2.67079385394061173391e-7f,
			1.11738753912010371815e-6f,
			-4.41673835845875056359e-6f,
			1.64484480707288970893e-5f,
			-5.75419501008210370398e-5f,
			1.88502885095841655729e-4f,
			-5.76375574538582365885e-4f,
			1.63947561694133579842e-3f,
			-4.32430999505057594430e-3f,
			1.05464603945949983183e-2f,
			-2.37374148058994688156e-2f,
			4.93052842396707084878e-2f,
			-9.49010970480476444210e-2f,
			1.71620901522208775349e-1f,
			-3.04682672343198398683e-1f,
			6.76795274409476084995e-1f};
	const std::array<float, 7> B = {
			3.39623202570838634515e-9f,
			2.26666899049817806459e-8f,
			2.04891858946906374183e-7f,
			2.89137052083475648297e-6f,
			6.88975834691682398426e-5f,
			3.36911647825569408990e-3f,
			8.04490411014108831608e-1f};

	x = std::abs(x);
	if(x < 8.0f) {
		return smt::chebeval(0.25f*x-1.0f, A);
	} else {
		return smt::chebeval(16.0f/x-1.0f, B)/std::sqrt(x);
	}
}

double besselei0(double x) {
	const std::array<double, 30> A = {
			-4.41534164647933937950e-18,
			3.33079451882223809783e-17,
			-2.43127984654795469359e-16,
			1.71539128555513303061e-15,
			-1.16853328779934516808e-14,
			7.67618549860493561688e-14,
			-4.85644678311192946090e-13,
			2.95505266312963983461e-12,
			-1.72682629144155570723e-11,
			9.67580903537323691224e-11,
			-5.18979560163526290666e-10,
			2.65982372468238665035e-9,
			-1.30002500998624804212e-8,
			6.04699502254191894932e-8,
			-2.67079385394061173391e-7,
			1.11738753912010371815e-6,
			-4.41673835845875056359e-6,
			1.64484480707288970893e-5,
			-5.75419501008210370398e-5,
			1.88502885095841655729e-4,
			-5.76375574538582365885e-4,
			1.63947561694133579842e-3,
			-4.32430999505057594430e-3,
			1.05464603945949983183e-2,
			-2.37374148058994688156e-2,
			4.93052842396707084878e-2,
			-9.49010970480476444210e-2,
			1.71620901522208775349e-1,
			-3.04682672343198398683e-1,
			6.76795274409476084995e-1};
	const std::array<double, 25> B = {
			-7.23318048787475395456e-18,
			-4.83050448594418207126e-18,
			4.46562142029675999901e-17,
			3.46122286769746109310e-17,
			-2.82762398051658348494e-16,
			-3.42548561967721913462e-16,
			1.77256013305652638360e-15,
			3.81168066935262242075e-15,
			-9.55484669882830764870e-15,
			-4.15056934728722208663e-14,
			1.54008621752140982691e-14,
			3.85277838274214270114e-13,
			7.18012445138366623367e-13,
			-1.79417853150680611778e-12,
			-1.32158118404477131188e-11,
			-3.14991652796324136454e-11,
			1.18891471078464383424e-11,
			4.94060238822496958910e-10,
			3.39623202570838634515e-9,
			2.26666899049817806459e-8,
			2.04891858946906374183e-7,
			2.89137052083475648297e-6,
			6.88975834691682398426e-5,
			3.36911647825569408990e-3,
			8.04490411014108831608e-1};

	x = std::abs(x);
	if(x < 8.0) {
		return smt::chebeval(0.25*x-1.0, A);
	} else {
		return smt::chebeval(16.0/x-1.0, B)/std::sqrt(x);
	}
}

// TODO: x == +/-Inf?
template <typename float_t>
float_t besseli0(const float_t x) {
	return std::exp(std::abs(x))*besselei0(x);
}

} // smt

#endif // _BESSELI0_H
